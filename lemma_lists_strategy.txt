1.) Need to get autoreconstruction working for ORV texts
2.) Current autoreconstruction info comes from a spreadsheet based on OCS lemmas, but ~2500 of the ORV lemmas can be automatically matched to reconstructed lemmas in that, and doubtless many of the remaining unautoreconstructed lemmas in both the OCS and ORV lists point to the same LCS lemma, so some LCS-based master-spreadsheet needs to be made somehow
3.) Maybe the solution is to manually reconstruct based on either the OCS or the ORV list, but periodically run the automatcher to fill in the other list with any automatches from the manual additions.
4.) That way, either the OCS or the ORV list can be worked on depending on one's immediate priorities, viz. which texts one is interested in processing, and then all progress is pooled into the master LCS spreadsheet.

5.) In order that autoreconstructions can proceed in the same way for both ORV and OCS texts, the LCS master-list should be used by autoreconstruction-programs, but this would require additional columns containing the ORV lemma-form and POS as well as the OCS ones, so that the lemmatisations from the TOROT texts can be accurately matched to lemmas in the master LCS list without relying on ever-changing lemma_ids ()


A master-lcs-spreadsheet should contain everything that the current ocs-based master-spreadsheet contains, but be for ORV and OCS lemmas, though where they recosntruct back to the same LCS form they should occupy only one row.
There will have to be fields for torot_ocs_form, torot_orv_form, and some form of lemma_id that is unique across both the chu and the orv lemmas, because ultimately they need to be reconstructed off just one lemlist_2.h file, which selects lemmas via the lemma_id field, which means they need to be unique.

Given that there are no lemma_ids in the XML files and the "new lemma ids" contained within the "chu_lemmas.csv" etc. files are simply regenerated starting from 1 by the XML parser, the most preferable solution would be to NOT include any lemma_ids in the master-spreadsheet beyond simply the lemmas row-number, and to assign new lemma_ids based off pos+lemma_form combinations every time the database is constructed. However, currently the .csv files extracted from the XML files which the database is built out of do not contain a lemma_form field, rather only a newly-generated lemma_id field, so that will need to be changed so that lemmas from the master-spreadsheet can be matched to the text-forms by comparing the pos+lemma_form combo.

One problem is the current ocs-based master-spreadsheet is based on the 2020 database, whereas the XML files are based on 2023, and as such some lemmas extracted from the 2023 files will not be present at all in the current spreadsheet.
To generate a master-lcs-spreadsheet, then, it will be necessary to add these extra 2023 lemmas to the current master-ocs-spreadsheet, and then to add the lemmas extracted from the orv-texts, but in such a way that those which can be matched to already-reconstructed OCS lemmas are not added as separate-rows.

Separate OCS and ORV spreadsheets would need to be maintained for the purposes of easy manual-reconstruction, but the database would be built off the master-lcs spreadsheet. A function would need to be run periodically to add new reconstructions from the ORV or CHU spreadsheets to the master-spreadsheet, which would also check whether any lemmas from the other-langauge spreadsheet can be auto-matched to the new additions, and if so their respective spreadsheet should also be updated with this information.
